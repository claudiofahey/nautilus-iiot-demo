/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.example.iiotdemo.flinkprocessor;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Generate classes with: java -jar ~/nautilus/avro/avro-tools-1.8.2.jar compile schema test5.avsc . */
@org.apache.avro.specific.AvroGenerated
public class GenericData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4378126684965106114L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GenericData\",\"namespace\":\"io.pravega.example.iiotdemo.flinkprocessor\",\"doc\":\"Generate classes with: java -jar ~/nautilus/avro/avro-tools-1.8.2.jar compile schema test5.avsc .\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Event time\"},{\"name\":\"device_id\",\"type\":\"string\",\"doc\":\"This is used as the routing key for the stream so it must exist for all types.\"},{\"name\":\"TempData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TempData\",\"fields\":[{\"name\":\"temp_celsius\",\"type\":\"double\"}]}],\"default\":null},{\"name\":\"VibrationData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VibrationData\",\"fields\":[{\"name\":\"vibration1\",\"type\":\"double\"},{\"name\":\"vibration2\",\"type\":[\"null\",\"double\"]}]}],\"default\":null},{\"name\":\"PressureData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PressureData\",\"fields\":[{\"name\":\"pressure\",\"type\":\"double\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GenericData> ENCODER =
      new BinaryMessageEncoder<GenericData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GenericData> DECODER =
      new BinaryMessageDecoder<GenericData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<GenericData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<GenericData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GenericData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this GenericData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a GenericData from a ByteBuffer. */
  public static GenericData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Event time */
  @Deprecated public org.joda.time.DateTime timestamp;
  /** This is used as the routing key for the stream so it must exist for all types. */
  @Deprecated public java.lang.CharSequence device_id;
  @Deprecated public io.pravega.example.iiotdemo.flinkprocessor.TempData TempData;
  @Deprecated public io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData;
  @Deprecated public io.pravega.example.iiotdemo.flinkprocessor.PressureData PressureData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GenericData() {}

  /**
   * All-args constructor.
   * @param timestamp Event time
   * @param device_id This is used as the routing key for the stream so it must exist for all types.
   * @param TempData The new value for TempData
   * @param VibrationData The new value for VibrationData
   * @param PressureData The new value for PressureData
   */
  public GenericData(org.joda.time.DateTime timestamp, java.lang.CharSequence device_id, io.pravega.example.iiotdemo.flinkprocessor.TempData TempData, io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData, io.pravega.example.iiotdemo.flinkprocessor.PressureData PressureData) {
    this.timestamp = timestamp;
    this.device_id = device_id;
    this.TempData = TempData;
    this.VibrationData = VibrationData;
    this.PressureData = PressureData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return device_id;
    case 2: return TempData;
    case 3: return VibrationData;
    case 4: return PressureData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (org.joda.time.DateTime)value$; break;
    case 1: device_id = (java.lang.CharSequence)value$; break;
    case 2: TempData = (io.pravega.example.iiotdemo.flinkprocessor.TempData)value$; break;
    case 3: VibrationData = (io.pravega.example.iiotdemo.flinkprocessor.VibrationData)value$; break;
    case 4: PressureData = (io.pravega.example.iiotdemo.flinkprocessor.PressureData)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Event time
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Event time
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return This is used as the routing key for the stream so it must exist for all types.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * This is used as the routing key for the stream so it must exist for all types.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'TempData' field.
   * @return The value of the 'TempData' field.
   */
  public io.pravega.example.iiotdemo.flinkprocessor.TempData getTempData() {
    return TempData;
  }

  /**
   * Sets the value of the 'TempData' field.
   * @param value the value to set.
   */
  public void setTempData(io.pravega.example.iiotdemo.flinkprocessor.TempData value) {
    this.TempData = value;
  }

  /**
   * Gets the value of the 'VibrationData' field.
   * @return The value of the 'VibrationData' field.
   */
  public io.pravega.example.iiotdemo.flinkprocessor.VibrationData getVibrationData() {
    return VibrationData;
  }

  /**
   * Sets the value of the 'VibrationData' field.
   * @param value the value to set.
   */
  public void setVibrationData(io.pravega.example.iiotdemo.flinkprocessor.VibrationData value) {
    this.VibrationData = value;
  }

  /**
   * Gets the value of the 'PressureData' field.
   * @return The value of the 'PressureData' field.
   */
  public io.pravega.example.iiotdemo.flinkprocessor.PressureData getPressureData() {
    return PressureData;
  }

  /**
   * Sets the value of the 'PressureData' field.
   * @param value the value to set.
   */
  public void setPressureData(io.pravega.example.iiotdemo.flinkprocessor.PressureData value) {
    this.PressureData = value;
  }

  /**
   * Creates a new GenericData RecordBuilder.
   * @return A new GenericData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder newBuilder() {
    return new io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder();
  }

  /**
   * Creates a new GenericData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GenericData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder(other);
  }

  /**
   * Creates a new GenericData RecordBuilder by copying an existing GenericData instance.
   * @param other The existing instance to copy.
   * @return A new GenericData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.GenericData other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder(other);
  }

  /**
   * RecordBuilder for GenericData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GenericData>
    implements org.apache.avro.data.RecordBuilder<GenericData> {

    /** Event time */
    private org.joda.time.DateTime timestamp;
    /** This is used as the routing key for the stream so it must exist for all types. */
    private java.lang.CharSequence device_id;
    private io.pravega.example.iiotdemo.flinkprocessor.TempData TempData;
    private io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder TempDataBuilder;
    private io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData;
    private io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder VibrationDataBuilder;
    private io.pravega.example.iiotdemo.flinkprocessor.PressureData PressureData;
    private io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder PressureDataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TempData)) {
        this.TempData = data().deepCopy(fields()[2].schema(), other.TempData);
        fieldSetFlags()[2] = true;
      }
      if (other.hasTempDataBuilder()) {
        this.TempDataBuilder = io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder(other.getTempDataBuilder());
      }
      if (isValidValue(fields()[3], other.VibrationData)) {
        this.VibrationData = data().deepCopy(fields()[3].schema(), other.VibrationData);
        fieldSetFlags()[3] = true;
      }
      if (other.hasVibrationDataBuilder()) {
        this.VibrationDataBuilder = io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder(other.getVibrationDataBuilder());
      }
      if (isValidValue(fields()[4], other.PressureData)) {
        this.PressureData = data().deepCopy(fields()[4].schema(), other.PressureData);
        fieldSetFlags()[4] = true;
      }
      if (other.hasPressureDataBuilder()) {
        this.PressureDataBuilder = io.pravega.example.iiotdemo.flinkprocessor.PressureData.newBuilder(other.getPressureDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing GenericData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.GenericData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TempData)) {
        this.TempData = data().deepCopy(fields()[2].schema(), other.TempData);
        fieldSetFlags()[2] = true;
      }
      this.TempDataBuilder = null;
      if (isValidValue(fields()[3], other.VibrationData)) {
        this.VibrationData = data().deepCopy(fields()[3].schema(), other.VibrationData);
        fieldSetFlags()[3] = true;
      }
      this.VibrationDataBuilder = null;
      if (isValidValue(fields()[4], other.PressureData)) {
        this.PressureData = data().deepCopy(fields()[4].schema(), other.PressureData);
        fieldSetFlags()[4] = true;
      }
      this.PressureDataBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Event time
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Event time
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Event time
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Event time
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * This is used as the routing key for the stream so it must exist for all types.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * This is used as the routing key for the stream so it must exist for all types.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.device_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * This is used as the routing key for the stream so it must exist for all types.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'device_id' field.
      * This is used as the routing key for the stream so it must exist for all types.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TempData' field.
      * @return The value.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TempData getTempData() {
      return TempData;
    }

    /**
      * Sets the value of the 'TempData' field.
      * @param value The value of 'TempData'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setTempData(io.pravega.example.iiotdemo.flinkprocessor.TempData value) {
      validate(fields()[2], value);
      this.TempDataBuilder = null;
      this.TempData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TempData' field has been set.
      * @return True if the 'TempData' field has been set, false otherwise.
      */
    public boolean hasTempData() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'TempData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder getTempDataBuilder() {
      if (TempDataBuilder == null) {
        if (hasTempData()) {
          setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder(TempData));
        } else {
          setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder());
        }
      }
      return TempDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'TempData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder value) {
      clearTempData();
      TempDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'TempData' field has an active Builder instance
     * @return True if the 'TempData' field has an active Builder instance
     */
    public boolean hasTempDataBuilder() {
      return TempDataBuilder != null;
    }

    /**
      * Clears the value of the 'TempData' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder clearTempData() {
      TempData = null;
      TempDataBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'VibrationData' field.
      * @return The value.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.VibrationData getVibrationData() {
      return VibrationData;
    }

    /**
      * Sets the value of the 'VibrationData' field.
      * @param value The value of 'VibrationData'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setVibrationData(io.pravega.example.iiotdemo.flinkprocessor.VibrationData value) {
      validate(fields()[3], value);
      this.VibrationDataBuilder = null;
      this.VibrationData = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'VibrationData' field has been set.
      * @return True if the 'VibrationData' field has been set, false otherwise.
      */
    public boolean hasVibrationData() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'VibrationData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder getVibrationDataBuilder() {
      if (VibrationDataBuilder == null) {
        if (hasVibrationData()) {
          setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder(VibrationData));
        } else {
          setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder());
        }
      }
      return VibrationDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'VibrationData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder value) {
      clearVibrationData();
      VibrationDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'VibrationData' field has an active Builder instance
     * @return True if the 'VibrationData' field has an active Builder instance
     */
    public boolean hasVibrationDataBuilder() {
      return VibrationDataBuilder != null;
    }

    /**
      * Clears the value of the 'VibrationData' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder clearVibrationData() {
      VibrationData = null;
      VibrationDataBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PressureData' field.
      * @return The value.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData getPressureData() {
      return PressureData;
    }

    /**
      * Sets the value of the 'PressureData' field.
      * @param value The value of 'PressureData'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setPressureData(io.pravega.example.iiotdemo.flinkprocessor.PressureData value) {
      validate(fields()[4], value);
      this.PressureDataBuilder = null;
      this.PressureData = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PressureData' field has been set.
      * @return True if the 'PressureData' field has been set, false otherwise.
      */
    public boolean hasPressureData() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'PressureData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder getPressureDataBuilder() {
      if (PressureDataBuilder == null) {
        if (hasPressureData()) {
          setPressureDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.PressureData.newBuilder(PressureData));
        } else {
          setPressureDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.PressureData.newBuilder());
        }
      }
      return PressureDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'PressureData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder setPressureDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder value) {
      clearPressureData();
      PressureDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'PressureData' field has an active Builder instance
     * @return True if the 'PressureData' field has an active Builder instance
     */
    public boolean hasPressureDataBuilder() {
      return PressureDataBuilder != null;
    }

    /**
      * Clears the value of the 'PressureData' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.GenericData.Builder clearPressureData() {
      PressureData = null;
      PressureDataBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GenericData build() {
      try {
        GenericData record = new GenericData();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[0], record.getConversion(0));
        record.device_id = fieldSetFlags()[1] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        if (TempDataBuilder != null) {
          record.TempData = this.TempDataBuilder.build();
        } else {
          record.TempData = fieldSetFlags()[2] ? this.TempData : (io.pravega.example.iiotdemo.flinkprocessor.TempData) defaultValue(fields()[2], record.getConversion(2));
        }
        if (VibrationDataBuilder != null) {
          record.VibrationData = this.VibrationDataBuilder.build();
        } else {
          record.VibrationData = fieldSetFlags()[3] ? this.VibrationData : (io.pravega.example.iiotdemo.flinkprocessor.VibrationData) defaultValue(fields()[3], record.getConversion(3));
        }
        if (PressureDataBuilder != null) {
          record.PressureData = this.PressureDataBuilder.build();
        } else {
          record.PressureData = fieldSetFlags()[4] ? this.PressureData : (io.pravega.example.iiotdemo.flinkprocessor.PressureData) defaultValue(fields()[4], record.getConversion(4));
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GenericData>
    WRITER$ = (org.apache.avro.io.DatumWriter<GenericData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GenericData>
    READER$ = (org.apache.avro.io.DatumReader<GenericData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
