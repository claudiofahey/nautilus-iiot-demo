/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.example.iiotdemo.flinkprocessor;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PressureData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4496030406472267765L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PressureData\",\"namespace\":\"io.pravega.example.iiotdemo.flinkprocessor\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"pressure\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PressureData> ENCODER =
      new BinaryMessageEncoder<PressureData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PressureData> DECODER =
      new BinaryMessageDecoder<PressureData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PressureData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PressureData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PressureData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PressureData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PressureData from a ByteBuffer. */
  public static PressureData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public org.joda.time.DateTime timestamp;
  @Deprecated public java.lang.CharSequence device_id;
  @Deprecated public java.lang.Double pressure;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PressureData() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param device_id The new value for device_id
   * @param pressure The new value for pressure
   */
  public PressureData(org.joda.time.DateTime timestamp, java.lang.CharSequence device_id, java.lang.Double pressure) {
    this.timestamp = timestamp;
    this.device_id = device_id;
    this.pressure = pressure;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return device_id;
    case 2: return pressure;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      TIMESTAMP_CONVERSION,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (org.joda.time.DateTime)value$; break;
    case 1: device_id = (java.lang.CharSequence)value$; break;
    case 2: pressure = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return The value of the 'pressure' field.
   */
  public java.lang.Double getPressure() {
    return pressure;
  }

  /**
   * Sets the value of the 'pressure' field.
   * @param value the value to set.
   */
  public void setPressure(java.lang.Double value) {
    this.pressure = value;
  }

  /**
   * Creates a new PressureData RecordBuilder.
   * @return A new PressureData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder newBuilder() {
    return new io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder();
  }

  /**
   * Creates a new PressureData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PressureData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder(other);
  }

  /**
   * Creates a new PressureData RecordBuilder by copying an existing PressureData instance.
   * @param other The existing instance to copy.
   * @return A new PressureData RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.PressureData other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder(other);
  }

  /**
   * RecordBuilder for PressureData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PressureData>
    implements org.apache.avro.data.RecordBuilder<PressureData> {

    private org.joda.time.DateTime timestamp;
    private java.lang.CharSequence device_id;
    private java.lang.Double pressure;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pressure)) {
        this.pressure = data().deepCopy(fields()[2].schema(), other.pressure);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PressureData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.PressureData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pressure)) {
        this.pressure = data().deepCopy(fields()[2].schema(), other.pressure);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.device_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * @return The value.
      */
    public java.lang.Double getPressure() {
      return pressure;
    }

    /**
      * Sets the value of the 'pressure' field.
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder setPressure(java.lang.Double value) {
      validate(fields()[2], value);
      this.pressure = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pressure' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.PressureData.Builder clearPressure() {
      pressure = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PressureData build() {
      try {
        PressureData record = new PressureData();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[0], record.getConversion(0));
        record.device_id = fieldSetFlags()[1] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.pressure = fieldSetFlags()[2] ? this.pressure : (java.lang.Double) defaultValue(fields()[2], record.getConversion(2));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PressureData>
    WRITER$ = (org.apache.avro.io.DatumWriter<PressureData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PressureData>
    READER$ = (org.apache.avro.io.DatumReader<PressureData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
