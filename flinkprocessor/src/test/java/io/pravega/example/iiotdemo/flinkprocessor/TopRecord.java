/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.example.iiotdemo.flinkprocessor;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** java -jar ~/nautilus/avro/avro-tools-1.8.2.jar compile schema test3.avsc . */
@org.apache.avro.specific.AvroGenerated
public class TopRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1542445972714078708L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TopRecord\",\"namespace\":\"io.pravega.example.iiotdemo.flinkprocessor\",\"doc\":\"java -jar ~/nautilus/avro/avro-tools-1.8.2.jar compile schema test3.avsc .\",\"fields\":[{\"name\":\"TempData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TempData\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"temp_celsius\",\"type\":[\"null\",\"double\"]}]}],\"default\":null},{\"name\":\"VibrationData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"VibrationData\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"vibration1\",\"type\":[\"null\",\"double\"]},{\"name\":\"vibration2\",\"type\":[\"null\",\"double\"]}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TopRecord> ENCODER =
      new BinaryMessageEncoder<TopRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TopRecord> DECODER =
      new BinaryMessageDecoder<TopRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TopRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TopRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TopRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TopRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TopRecord from a ByteBuffer. */
  public static TopRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.pravega.example.iiotdemo.flinkprocessor.TempData TempData;
  @Deprecated public io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TopRecord() {}

  /**
   * All-args constructor.
   * @param TempData The new value for TempData
   * @param VibrationData The new value for VibrationData
   */
  public TopRecord(io.pravega.example.iiotdemo.flinkprocessor.TempData TempData, io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData) {
    this.TempData = TempData;
    this.VibrationData = VibrationData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TempData;
    case 1: return VibrationData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TempData = (io.pravega.example.iiotdemo.flinkprocessor.TempData)value$; break;
    case 1: VibrationData = (io.pravega.example.iiotdemo.flinkprocessor.VibrationData)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'TempData' field.
   * @return The value of the 'TempData' field.
   */
  public io.pravega.example.iiotdemo.flinkprocessor.TempData getTempData() {
    return TempData;
  }

  /**
   * Sets the value of the 'TempData' field.
   * @param value the value to set.
   */
  public void setTempData(io.pravega.example.iiotdemo.flinkprocessor.TempData value) {
    this.TempData = value;
  }

  /**
   * Gets the value of the 'VibrationData' field.
   * @return The value of the 'VibrationData' field.
   */
  public io.pravega.example.iiotdemo.flinkprocessor.VibrationData getVibrationData() {
    return VibrationData;
  }

  /**
   * Sets the value of the 'VibrationData' field.
   * @param value the value to set.
   */
  public void setVibrationData(io.pravega.example.iiotdemo.flinkprocessor.VibrationData value) {
    this.VibrationData = value;
  }

  /**
   * Creates a new TopRecord RecordBuilder.
   * @return A new TopRecord RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder newBuilder() {
    return new io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder();
  }

  /**
   * Creates a new TopRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TopRecord RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder(other);
  }

  /**
   * Creates a new TopRecord RecordBuilder by copying an existing TopRecord instance.
   * @param other The existing instance to copy.
   * @return A new TopRecord RecordBuilder
   */
  public static io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder newBuilder(io.pravega.example.iiotdemo.flinkprocessor.TopRecord other) {
    return new io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder(other);
  }

  /**
   * RecordBuilder for TopRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TopRecord>
    implements org.apache.avro.data.RecordBuilder<TopRecord> {

    private io.pravega.example.iiotdemo.flinkprocessor.TempData TempData;
    private io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder TempDataBuilder;
    private io.pravega.example.iiotdemo.flinkprocessor.VibrationData VibrationData;
    private io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder VibrationDataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TempData)) {
        this.TempData = data().deepCopy(fields()[0].schema(), other.TempData);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTempDataBuilder()) {
        this.TempDataBuilder = io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder(other.getTempDataBuilder());
      }
      if (isValidValue(fields()[1], other.VibrationData)) {
        this.VibrationData = data().deepCopy(fields()[1].schema(), other.VibrationData);
        fieldSetFlags()[1] = true;
      }
      if (other.hasVibrationDataBuilder()) {
        this.VibrationDataBuilder = io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder(other.getVibrationDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TopRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.pravega.example.iiotdemo.flinkprocessor.TopRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.TempData)) {
        this.TempData = data().deepCopy(fields()[0].schema(), other.TempData);
        fieldSetFlags()[0] = true;
      }
      this.TempDataBuilder = null;
      if (isValidValue(fields()[1], other.VibrationData)) {
        this.VibrationData = data().deepCopy(fields()[1].schema(), other.VibrationData);
        fieldSetFlags()[1] = true;
      }
      this.VibrationDataBuilder = null;
    }

    /**
      * Gets the value of the 'TempData' field.
      * @return The value.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TempData getTempData() {
      return TempData;
    }

    /**
      * Sets the value of the 'TempData' field.
      * @param value The value of 'TempData'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder setTempData(io.pravega.example.iiotdemo.flinkprocessor.TempData value) {
      validate(fields()[0], value);
      this.TempDataBuilder = null;
      this.TempData = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TempData' field has been set.
      * @return True if the 'TempData' field has been set, false otherwise.
      */
    public boolean hasTempData() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'TempData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder getTempDataBuilder() {
      if (TempDataBuilder == null) {
        if (hasTempData()) {
          setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder(TempData));
        } else {
          setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.newBuilder());
        }
      }
      return TempDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'TempData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder setTempDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.TempData.Builder value) {
      clearTempData();
      TempDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'TempData' field has an active Builder instance
     * @return True if the 'TempData' field has an active Builder instance
     */
    public boolean hasTempDataBuilder() {
      return TempDataBuilder != null;
    }

    /**
      * Clears the value of the 'TempData' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder clearTempData() {
      TempData = null;
      TempDataBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'VibrationData' field.
      * @return The value.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.VibrationData getVibrationData() {
      return VibrationData;
    }

    /**
      * Sets the value of the 'VibrationData' field.
      * @param value The value of 'VibrationData'.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder setVibrationData(io.pravega.example.iiotdemo.flinkprocessor.VibrationData value) {
      validate(fields()[1], value);
      this.VibrationDataBuilder = null;
      this.VibrationData = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'VibrationData' field has been set.
      * @return True if the 'VibrationData' field has been set, false otherwise.
      */
    public boolean hasVibrationData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'VibrationData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder getVibrationDataBuilder() {
      if (VibrationDataBuilder == null) {
        if (hasVibrationData()) {
          setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder(VibrationData));
        } else {
          setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.newBuilder());
        }
      }
      return VibrationDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'VibrationData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder setVibrationDataBuilder(io.pravega.example.iiotdemo.flinkprocessor.VibrationData.Builder value) {
      clearVibrationData();
      VibrationDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'VibrationData' field has an active Builder instance
     * @return True if the 'VibrationData' field has an active Builder instance
     */
    public boolean hasVibrationDataBuilder() {
      return VibrationDataBuilder != null;
    }

    /**
      * Clears the value of the 'VibrationData' field.
      * @return This builder.
      */
    public io.pravega.example.iiotdemo.flinkprocessor.TopRecord.Builder clearVibrationData() {
      VibrationData = null;
      VibrationDataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TopRecord build() {
      try {
        TopRecord record = new TopRecord();
        if (TempDataBuilder != null) {
          record.TempData = this.TempDataBuilder.build();
        } else {
          record.TempData = fieldSetFlags()[0] ? this.TempData : (io.pravega.example.iiotdemo.flinkprocessor.TempData) defaultValue(fields()[0]);
        }
        if (VibrationDataBuilder != null) {
          record.VibrationData = this.VibrationDataBuilder.build();
        } else {
          record.VibrationData = fieldSetFlags()[1] ? this.VibrationData : (io.pravega.example.iiotdemo.flinkprocessor.VibrationData) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TopRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TopRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TopRecord>
    READER$ = (org.apache.avro.io.DatumReader<TopRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
