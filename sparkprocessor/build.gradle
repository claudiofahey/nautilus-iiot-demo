plugins {
    id "com.github.johnrengelman.shadow" version "1.2.4"
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "application"

group = "io.pravega.example.iiotdemo"
version = samplesVersion
archivesBaseName = "iiotdemo-sparkprocessor"
description = "iiotdemo-sparkprocessor"
mainClassName = "io.pravega.example.iiotdemo.sparkprocessor.ApplicationMain"
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repository.apache.org/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    compile "org.apache.spark:spark-core_2.11:${sparkVersion}"
    compile "org.apache.spark:spark-sql_2.11:${sparkVersion}"
    compile "org.slf4j:slf4j-api:1.6.6"
    compile "ch.qos.logback:logback-core:1.2.3"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "net.logstash.logback:logstash-logback-encoder:4.11"
//    compile "io.pravega:pravega-client:${pravegaVersion}"

    // Below commented out because we get a GRPC version conflict.
//    compile "io.pravega:hadoop-connectors:${pravegaHadoopConnectorVersion}"
//    compile "org.apache.hadoop:hadoop-common:${hadoopVersion}"

    // common-library dependencies
//    compile "com.google.guava:guava:20.0"
//    compile "org.xerial:sqlite-jdbc:3.20.0"

    testCompile group: "junit", name: "junit", version: "4.11"
}

configurations.all {
    resolutionStrategy {
        // Required for Spark.
        force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    }
}

shadowJar {
    dependencies {
        exclude(dependency("org.scala-lang:scala-library"))
        exclude(dependency("org.scala-lang:scala-reflect"))
        exclude(dependency("org.scala-lang:scala-compiler"))
    }

    relocate "com.google", "com.dell.nautilus.analytics.shaded.com.google"
    relocate "io.netty", "com.dell.nautilus.analytics.shaded.io.netty"

    zip64 true
}

distributions {
    main {
        baseName = archivesBaseName
        contents {
            into("lib") {
                from shadowJar
                from(project.configurations.shadow)
            }
        }
    }
}
